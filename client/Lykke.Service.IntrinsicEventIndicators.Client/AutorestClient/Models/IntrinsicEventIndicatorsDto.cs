// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.IntrinsicEventIndicators.Client.AutorestClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class IntrinsicEventIndicatorsDto
    {
        /// <summary>
        /// Initializes a new instance of the IntrinsicEventIndicatorsDto
        /// class.
        /// </summary>
        public IntrinsicEventIndicatorsDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IntrinsicEventIndicatorsDto
        /// class.
        /// </summary>
        public IntrinsicEventIndicatorsDto(IList<IntrinsicEventIndicatorsColumnDto> columns, IList<IntrinsicEventIndicatorsRowDto> rows, IList<IList<double?>> data, IList<IList<string>> timesFromDc)
        {
            Columns = columns;
            Rows = rows;
            Data = data;
            TimesFromDc = timesFromDc;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Columns")]
        public IList<IntrinsicEventIndicatorsColumnDto> Columns { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Rows")]
        public IList<IntrinsicEventIndicatorsRowDto> Rows { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Data")]
        public IList<IList<double?>> Data { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TimesFromDc")]
        public IList<IList<string>> TimesFromDc { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Columns == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Columns");
            }
            if (Rows == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Rows");
            }
            if (Data == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Data");
            }
            if (TimesFromDc == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TimesFromDc");
            }
            if (Columns != null)
            {
                foreach (var element in Columns)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Rows != null)
            {
                foreach (var element1 in Rows)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
